Index: src/test/java/gmibank/utilities/Driver.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package gmibank.utilities;\r\n\r\nimport com.google.common.base.Function;\r\nimport io.github.bonigarcia.wdm.WebDriverManager;\r\nimport org.junit.Assert;\r\nimport org.openqa.selenium.*;\r\nimport org.openqa.selenium.chrome.ChromeDriver;\r\nimport org.openqa.selenium.chrome.ChromeOptions;\r\nimport org.openqa.selenium.firefox.FirefoxDriver;\r\nimport org.openqa.selenium.ie.InternetExplorerDriver;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.safari.SafariDriver;\r\nimport org.openqa.selenium.support.ui.*;\r\n\r\nimport java.time.Duration;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Random;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\nimport static org.junit.Assert.assertFalse;\r\nimport static org.junit.Assert.assertTrue;\r\n\r\npublic class Driver {\r\n\r\n    private Driver(){ }\r\n    static WebDriver driver;\r\n\r\n    public static WebDriver getDriver(){\r\n        if(driver == null){\r\n            switch (gmibank.utilities.ConfigurationReader.getProperty(\"browser\")){\r\n                case \"chrome\":\r\n                    WebDriverManager.chromedriver().setup();\r\n                    driver = new ChromeDriver();\r\n                    break;\r\n                case \"firefox\":\r\n                    WebDriverManager.firefoxdriver().setup();\r\n                    driver = new FirefoxDriver();\r\n                    break;\r\n                case \"ie\":\r\n                    WebDriverManager.iedriver().setup();\r\n                    driver = new InternetExplorerDriver();\r\n                    break;\r\n                case \"safari\":\r\n                    WebDriverManager.getInstance(SafariDriver.class).setup();\r\n                    driver = new SafariDriver();\r\n                    break;\r\n                case \"headless-chrome\":\r\n                    WebDriverManager.chromedriver().setup();\r\n                    driver = new ChromeDriver(new ChromeOptions().setHeadless(true));\r\n                    break;\r\n            }\r\n\r\n        }\r\n\r\n        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);\r\n        driver.manage().window().maximize();\r\n\r\n        return driver;\r\n    }\r\n\r\n    public static void closeDriver(){\r\n        if (driver != null){\r\n            driver.quit();\r\n            driver = null;\r\n        }\r\n    }\r\n    public static void waitAndClick(WebElement element, int timeout) {\r\n        for (int i = 0; i < timeout; i++) {\r\n            try {\r\n                element.click();\r\n                return;\r\n            } catch (WebDriverException e) {\r\n                wait(1);\r\n            }\r\n        }\r\n    }\r\n    public static void waitAndSendText(WebElement element,String text, int timeout) {\r\n        for (int i = 0; i < timeout; i++) {\r\n            try {\r\n                element.sendKeys(text);\r\n                return;\r\n            } catch (WebDriverException e) {\r\n                wait(1);\r\n            }\r\n        }\r\n    }\r\n    public static String waitAndGetText(WebElement element, int timeout) {\r\n        String text=\"\";\r\n        for (int i = 0; i < timeout; i++) {\r\n            try {\r\n                text = element.getText();\r\n                return text;\r\n            } catch (WebDriverException e) {\r\n                wait(1);\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    public static void wait(int secs) {\r\n        try {\r\n            Thread.sleep(1000 * secs);\r\n        } catch (InterruptedException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n    /*\r\n     * switches to new window by the exact title\r\n     * returns to original window if windows with given title not found\r\n     */\r\n    public static void switchToWindow(String targetTitle) {\r\n        String origin = gmibank.utilities.Driver.getDriver().getWindowHandle();\r\n        for (String handle : gmibank.utilities.Driver.getDriver().getWindowHandles()) {\r\n            gmibank.utilities.Driver.getDriver().switchTo().window(handle);\r\n            if (gmibank.utilities.Driver.getDriver().getTitle().equals(targetTitle)) {\r\n                return;\r\n            }\r\n        }\r\n        gmibank.utilities.Driver.getDriver().switchTo().window(origin);\r\n    }\r\n    public static void hover(WebElement element) {\r\n        Actions actions = new Actions(gmibank.utilities.Driver.getDriver());\r\n        actions.moveToElement(element).perform();\r\n    }\r\n    /**\r\n     * return a list of string from a list of elements ignores any element with no\r\n     * text\r\n     *\r\n     * @param list\r\n     * @return\r\n     */\r\n    public static List<String> getElementsText(List<WebElement> list) {\r\n        List<String> elemTexts = new ArrayList<>();\r\n        for (WebElement el : list) {\r\n            elemTexts.add(el.getText());\r\n        }\r\n        return elemTexts;\r\n    }\r\n    public static List<String> getElementsText(By locator) {\r\n        List<WebElement> elems = gmibank.utilities.Driver.getDriver().findElements(locator);\r\n        List<String> elemTexts = new ArrayList<>();\r\n        for (WebElement el : elems) {\r\n            elemTexts.add(el.getText());\r\n        }\r\n        return elemTexts;\r\n    }\r\n    public static WebElement waitForVisibility(WebElement element, int timeToWaitInSec) {\r\n        WebDriverWait wait = new WebDriverWait(gmibank.utilities.Driver.getDriver(), timeToWaitInSec);\r\n        return wait.until(ExpectedConditions.visibilityOf(element));\r\n    }\r\n    public static WebElement waitForVisibility(By locator, int timeout) {\r\n        WebDriverWait wait = new WebDriverWait(gmibank.utilities.Driver.getDriver(), timeout);\r\n        return wait.until(ExpectedConditions.visibilityOfElementLocated(locator));\r\n    }\r\n    public static Boolean waitForInVisibility(By locator, int timeout) {\r\n        WebDriverWait wait = new WebDriverWait(gmibank.utilities.Driver.getDriver(), timeout);\r\n        return wait.until(ExpectedConditions.invisibilityOfElementLocated(locator));\r\n    }\r\n    public static WebElement waitForClickablility(WebElement element, int timeout) {\r\n        WebDriverWait wait = new WebDriverWait(gmibank.utilities.Driver.getDriver(), timeout);\r\n        return wait.until(ExpectedConditions.elementToBeClickable(element));\r\n    }\r\n    public static WebElement waitForClickablility(By locator, int timeout) {\r\n        WebDriverWait wait = new WebDriverWait(gmibank.utilities.Driver.getDriver(), timeout);\r\n        return wait.until(ExpectedConditions.elementToBeClickable(locator));\r\n    }\r\n    public static void waitForPageToLoad(long timeOutInSeconds) {\r\n        ExpectedCondition<Boolean> expectation = new ExpectedCondition<Boolean>() {\r\n            public Boolean apply(WebDriver driver) {\r\n                return ((JavascriptExecutor) driver).executeScript(\"return document.readyState\").equals(\"complete\");\r\n            }\r\n        };\r\n        try {\r\n            WebDriverWait wait = new WebDriverWait(gmibank.utilities.Driver.getDriver(), timeOutInSeconds);\r\n            wait.until(expectation);\r\n        } catch (Exception error) {\r\n            error.printStackTrace();\r\n        }\r\n    }\r\n    public static WebElement fluentWait(final WebElement webElement, int timeinsec) {\r\n        FluentWait<WebDriver> wait = new FluentWait<WebDriver>(gmibank.utilities.Driver.getDriver())\r\n                .withTimeout(Duration.ofSeconds(timeinsec))\r\n                .pollingEvery(Duration.ofMillis(500))\r\n                .ignoring(NoSuchElementException.class);\r\n        WebElement element = wait.until(new Function<WebDriver, WebElement>() {\r\n            public WebElement apply(WebDriver driver) {\r\n                return webElement;\r\n            }\r\n        });\r\n        return element;\r\n    }\r\n    /**\r\n     * Verifies whether the element matching the provided locator is displayed on page\r\n     * fails if the element matching the provided locator is not found or not displayed\r\n     *\r\n     * @param by\r\n     */\r\n    public static void verifyElementDisplayed(By by) {\r\n        try {\r\n            assertTrue(\"Element not visible: \" + by, gmibank.utilities.Driver.getDriver().findElement(by).isDisplayed());\r\n        } catch (NoSuchElementException e) {\r\n            Assert.fail(\"Element not found: \" + by);\r\n        }\r\n    }\r\n    /**\r\n     * Verifies whether the element matching the provided locator is NOT displayed on page\r\n     * fails if the element matching the provided locator is not found or not displayed\r\n     *\r\n     * @param by\r\n     */\r\n    public static void verifyElementNotDisplayed(By by) {\r\n        try {\r\n            assertFalse(\"Element should not be visible: \" + by, gmibank.utilities.Driver.getDriver().findElement(by).isDisplayed());\r\n        } catch (NoSuchElementException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n    /**\r\n     * Verifies whether the element is displayed on page\r\n     * fails if the element is not found or not displayed\r\n     *\r\n     * @param element\r\n     */\r\n    public static void verifyElementDisplayed(WebElement element) {\r\n        try {\r\n            assertTrue(\"Element not visible: \" + element, element.isDisplayed());\r\n        } catch (NoSuchElementException e) {\r\n            Assert.fail(\"Element not found: \" + element);\r\n        }\r\n    }\r\n    /**\r\n     * Waits for element to be not stale\r\n     *\r\n     * @param element\r\n     */\r\n    public void waitForStaleElement(WebElement element) {\r\n        int y = 0;\r\n        while (y <= 15) {\r\n            if (y == 1)\r\n                try {\r\n                    element.isDisplayed();\r\n                    break;\r\n                } catch (StaleElementReferenceException st) {\r\n                    y++;\r\n                    try {\r\n                        Thread.sleep(300);\r\n                    } catch (InterruptedException e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                } catch (WebDriverException we) {\r\n                    y++;\r\n                    try {\r\n                        Thread.sleep(300);\r\n                    } catch (InterruptedException e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                }\r\n        }\r\n    }\r\n    /**\r\n     * Selects a random value from a dropdown list and returns the selected Web Element\r\n     *\r\n     * @param select\r\n     * @return\r\n     */\r\n    public static WebElement selectRandomTextFromDropdown(Select select) {\r\n        Random random = new Random();\r\n        List<WebElement> weblist = select.getOptions();\r\n        int optionIndex = 1 + random.nextInt(weblist.size() - 1);\r\n        select.selectByIndex(optionIndex);\r\n        return select.getFirstSelectedOption();\r\n    }\r\n    /**\r\n     * Clicks on an element using JavaScript\r\n     *\r\n     * @param element\r\n     */\r\n    public static void clickWithJS(WebElement element) {\r\n        ((JavascriptExecutor) gmibank.utilities.Driver.getDriver()).executeScript(\"arguments[0].scrollIntoView(true);\", element);\r\n        ((JavascriptExecutor) gmibank.utilities.Driver.getDriver()).executeScript(\"arguments[0].click();\", element);\r\n    }\r\n    /**\r\n     * Scrolls down to an element using JavaScript\r\n     *\r\n     * @param element\r\n     */\r\n    public static void scrollToElement(WebElement element) {\r\n        ((JavascriptExecutor) gmibank.utilities.Driver.getDriver()).executeScript(\"arguments[0].scrollIntoView(true);\", element);\r\n    }\r\n    /**\r\n     * Performs double click action on an element\r\n     *\r\n     * @param element\r\n     */\r\n    public static void doubleClick(WebElement element) {\r\n        new Actions(gmibank.utilities.Driver.getDriver()).doubleClick(element).build().perform();\r\n    }\r\n    /**\r\n     * Changes the HTML attribute of a Web Element to the given value using JavaScript\r\n     *\r\n     * @param element\r\n     * @param attributeName\r\n     * @param attributeValue\r\n     */\r\n    public static void setAttribute(WebElement element, String attributeName, String attributeValue) {\r\n        ((JavascriptExecutor) gmibank.utilities.Driver.getDriver()).executeScript(\"arguments[0].setAttribute(arguments[1], arguments[2]);\", element, attributeName, attributeValue);\r\n    }\r\n    /**\r\n     * @param element\r\n     * @param check\r\n     */\r\n    public static void selectCheckBox(WebElement element, boolean check) {\r\n        if (check) {\r\n            if (!element.isSelected()) {\r\n                element.click();\r\n            }\r\n        } else {\r\n            if (element.isSelected()) {\r\n                element.click();\r\n            }\r\n        }\r\n    }\r\n    public static void clickWithTimeOut(WebElement element, int timeout) {\r\n        for (int i = 0; i < timeout; i++) {\r\n            try {\r\n                element.click();\r\n                return;\r\n            } catch (WebDriverException e) {\r\n                wait(1);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * executes the given JavaScript command on given web element\r\n     *\r\n     * @param element\r\n     */\r\n    public static void executeJScommand(WebElement element, String command) {\r\n        JavascriptExecutor jse = (JavascriptExecutor) gmibank.utilities.Driver.getDriver();\r\n        jse.executeScript(command, element);\r\n    }\r\n    /**\r\n     * executes the given JavaScript command on given web element\r\n     *\r\n     * @param command\r\n     */\r\n    public static void executeJScommand(String command) {\r\n        JavascriptExecutor jse = (JavascriptExecutor) gmibank.utilities.Driver.getDriver();\r\n        jse.executeScript(command);\r\n    }\r\n\r\n\r\n    public boolean isElementSelected(By locator){\r\n        return webAction(locator).isSelected();\r\n    }\r\n    public void sendValue(By locator, String value) {\r\n        try{\r\n            webAction(locator).sendKeys(value);\r\n        }catch (Exception e){\r\n            System.out.println(\"Some exception occured while sending value\"+ locator);\r\n        }\r\n\r\n    }\r\n    public static WebElement webAction(final By locator){\r\n        Wait<WebDriver> wait = new FluentWait<WebDriver>(getDriver())\r\n                .withTimeout(Duration.ofSeconds(15))\r\n                .pollingEvery(Duration.ofSeconds(1))\r\n                .ignoring(NoSuchElementException.class)\r\n                .ignoring(StaleElementReferenceException.class)\r\n                .ignoring(ElementClickInterceptedException.class)\r\n                .withMessage(\r\n                        \"Webdriver waited for 15 seconds nut still could not find the element therefore TimeOutException has been thrown\"\r\n                );\r\n        return wait.until(new Function<WebDriver, WebElement>(){\r\n            public WebElement apply(WebDriver driver){\r\n                return driver.findElement(locator);\r\n            }\r\n        });\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/gmibank/utilities/Driver.java b/src/test/java/gmibank/utilities/Driver.java
--- a/src/test/java/gmibank/utilities/Driver.java	
+++ b/src/test/java/gmibank/utilities/Driver.java	
@@ -32,6 +32,7 @@
                 case "chrome":
                     WebDriverManager.chromedriver().setup();
                     driver = new ChromeDriver();
+                    WebDriverWait wait = new WebDriverWait(driver, 10);
                     break;
                 case "firefox":
                     WebDriverManager.firefoxdriver().setup();
Index: src/test/java/gmibank/runners/Runner.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package gmibank.runners;\r\n\r\nimport io.cucumber.junit.Cucumber;\r\nimport io.cucumber.junit.CucumberOptions;\r\nimport org.junit.runner.RunWith;\r\n\r\n@RunWith(Cucumber.class)\r\n@CucumberOptions(strict = true,\r\n        plugin = {\"html:target/default-cucumber-reports\",\r\n                \"json:target/json-reports/cucumber.json\",\r\n                \"junit:target/xml-report/cucumber.xml\"},\r\n        features = \"features\",\r\n        glue = \"stepDefinitions\",\r\n        tags = \"@AllCustomerApi\",\r\n        dryRun = false\r\n)\r\npublic class Runner {\r\n\r\n}\r\n
===================================================================
diff --git a/src/test/java/gmibank/runners/Runner.java b/src/test/java/gmibank/runners/Runner.java
--- a/src/test/java/gmibank/runners/Runner.java	
+++ b/src/test/java/gmibank/runners/Runner.java	
@@ -9,9 +9,9 @@
         plugin = {"html:target/default-cucumber-reports",
                 "json:target/json-reports/cucumber.json",
                 "junit:target/xml-report/cucumber.xml"},
-        features = "features",
+        features = "src/test/resources/features",
         glue = "stepDefinitions",
-        tags = "@AllCustomerApi",
+        tags = "@us12",
         dryRun = false
 )
 public class Runner {
Index: src/test/java/gmibank/pages/LoginPage.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package gmibank.pages;\r\n\r\npublic class LoginPage {\r\n}\r\n
===================================================================
diff --git a/src/test/java/gmibank/pages/LoginPage.java b/src/test/java/gmibank/pages/LoginPage.java
--- a/src/test/java/gmibank/pages/LoginPage.java	
+++ b/src/test/java/gmibank/pages/LoginPage.java	
@@ -1,4 +1,6 @@
 package gmibank.pages;
 
+
 public class LoginPage {
+
 }
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"VcsDirectoryMappings\">\r\n    <mapping directory=\"$PROJECT_DIR$/..\" vcs=\"Git\" />\r\n    <mapping directory=\"$PROJECT_DIR$\" vcs=\"Git\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
--- a/.idea/vcs.xml	
+++ b/.idea/vcs.xml	
@@ -1,7 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="VcsDirectoryMappings">
-    <mapping directory="$PROJECT_DIR$/.." vcs="Git" />
     <mapping directory="$PROJECT_DIR$" vcs="Git" />
   </component>
 </project>
\ No newline at end of file
Index: .idea/compiler.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"CompilerConfiguration\">\r\n    <annotationProcessing>\r\n      <profile name=\"Maven default annotation processors profile\" enabled=\"true\">\r\n        <sourceOutputDir name=\"target/generated-sources/annotations\" />\r\n        <sourceTestOutputDir name=\"target/generated-test-sources/test-annotations\" />\r\n        <outputRelativeToContentRoot value=\"true\" />\r\n        <module name=\"Gmibank\" />\r\n      </profile>\r\n    </annotationProcessing>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/compiler.xml b/.idea/compiler.xml
--- a/.idea/compiler.xml	
+++ b/.idea/compiler.xml	
@@ -6,6 +6,7 @@
         <sourceOutputDir name="target/generated-sources/annotations" />
         <sourceTestOutputDir name="target/generated-test-sources/test-annotations" />
         <outputRelativeToContentRoot value="true" />
+        <module name="Gmibank34" />
         <module name="Gmibank" />
       </profile>
     </annotationProcessing>
